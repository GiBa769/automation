# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Login thành công vào SauceDemo
- Location: D:\Work\Playwright\tests\sauceLogin.spec.ts:3:5

# Error details

```
Error: browserType.launch: Executable doesn't exist at C:\Users\giaba\AppData\Local\ms-playwright\chromium_headless_shell-1161\chrome-win\headless_shell.exe
╔═════════════════════════════════════════════════════════════════════════╗
║ Looks like Playwright Test or Playwright was just installed or updated. ║
║ Please run the following command to download new browsers:              ║
║                                                                         ║
║     npx playwright install                                              ║
║                                                                         ║
║ <3 Playwright Team                                                      ║
╚═════════════════════════════════════════════════════════════════════════╝
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
>  3 | test('Login thành công vào SauceDemo', async ({ page }) => {
     |     ^ Error: browserType.launch: Executable doesn't exist at C:\Users\giaba\AppData\Local\ms-playwright\chromium_headless_shell-1161\chrome-win\headless_shell.exe
   4 |     await page.goto('https://www.saucedemo.com');
   5 |
   6 |     await page.fill('#user-name', 'standard_user');
   7 |     await page.fill('#password', 'secret_sauce');
   8 |     await page.click('#login-button');
   9 |
  10 |     // Xác minh login thành công bằng tiêu đề trang hoặc item đầu tiên
  11 |     await expect(page.locator('.title')).toHaveText('Products');
  12 |
  13 |     // Optional - Check item đầu tiên có xuất hiện
  14 |     const firstItem = page.locator('.inventory_item_name').first();
  15 |     await expect(firstItem).toBeVisible();
  16 |
  17 |     console.log('✅ Đăng nhập thành công!');
  18 |     const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  19 |     await page.screenshot({ path: 'screenshots/screenshot-${timestamp}.png' });
  20 |
  21 |     //await page.screenshot({ path: 'screenshots/login-success.png' });
  22 |
  23 | });
  24 |
```